package br.com.codiub.enderecos.resource;

import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import br.com.codiub.enderecos.entity.Ceps;
import br.com.codiub.enderecos.filter.CepsFilter;
import br.com.codiub.enderecos.repository.CepsRepository;
import br.com.codiub.enderecos.service.CepsService;

@RestController
@RequestMapping("/ceps")
public class CepsResource {

  @Autowired private CepsRepository cepsRepository;

  @Autowired private CepsService cepsService;

  @PostMapping
  public ResponseEntity<Ceps> criar(@RequestBody Ceps ceps, HttpServletResponse response) {
    Ceps cepsSalva = cepsRepository.save(ceps);
    return ResponseEntity.status(HttpStatus.CREATED).body(cepsSalva);
  }

  @GetMapping("/{codigo}")
  public ResponseEntity<Ceps> buscarPeloCodigo(@PathVariable Long codigo) {
    Optional<Ceps> ceps = cepsRepository.findById(codigo);
    return ceps != null ? ResponseEntity.ok(ceps.get()) : ResponseEntity.notFound().build();
  }

  @DeleteMapping("/{codigo}")
  @ResponseStatus(HttpStatus.NO_CONTENT)
  public void remover(@PathVariable Long codigo) {
    cepsRepository.deleteById(codigo);
  }

  @PutMapping("/{codigo}")
  public ResponseEntity<Ceps> atualizar(
      @PathVariable Long codigo, @Validated @RequestBody Ceps ceps) {
    Ceps cepsSalva = cepsService.atualizar(codigo, ceps);
    return ResponseEntity.ok(cepsSalva);
  }

  @GetMapping
  public Page<Ceps> pesquisar(CepsFilter cepsFilter, Pageable pageable) {
    return cepsRepository.filtrar(cepsFilter, pageable);
  }
}
